cc -Wall -Wextra -Werror -MMD -g -O0 -I./include -I./src/parser -I./src/maths -I./src/cameras -I./src/window -I./src/world -I./src/tracers -I./src/geometricobj -I./src/utilities -I./mlx -c src/main.c -o obj/src/main.o
gcc -Wall -Wextra -Werror -MMD -g -O0 -I./include -I./src/parser -I./src/maths -I./src/cameras -I./src/window -I./src/world -I./src/tracers -I./src/geometricobj -I./src/utilities -I./mlx -c src/utilities/ft_find.c -o obj/src/utilities/ft_find.o
gcc -Wall -Wextra -Werror -MMD -g -O0 -I./include -I./src/parser -I./src/maths -I./src/cameras -I./src/window -I./src/world -I./src/tracers -I./src/geometricobj -I./src/utilities -I./mlx -c src/render/ft_init.c -o obj/src/render/ft_init.o
gcc -Wall -Wextra -Werror -MMD -g -O0 -I./include -I./src/parser -I./src/maths -I./src/cameras -I./src/window -I./src/world -I./src/tracers -I./src/geometricobj -I./src/utilities -I./mlx -c src/render/ft_render.c -o obj/src/render/ft_render.o
gcc -Wall -Wextra -Werror -MMD -g -O0 -L./include -L./src/parser -L./src/maths -L./src/cameras -L./src/window -L./src/world -L./src/tracers -L./src/geometricobj -L./src/utilities -L./mlx obj/src/main.o obj/src/utilities/ft_find.o obj/src/render/ft_init.o obj/src/render/ft_render.o -lparser -lmath -lcameras -lwindow -lworld -ltracers -lgeometricobj -lshade -lmlx -lX11 -lXext -lm -lz -o miniRT
/usr/bin/ld: obj/src/render/ft_render.o: en la función `ft_render':
/home/vboxuser/Escritorio/new-minirt/src/render/ft_render.c:30: referencia a `ft_samplers' sin definir
/usr/bin/ld: ./src/world/libworld.a(ft_set_world.o): en la función `ft_set_world':
/home/vboxuser/Escritorio/new-minirt/src/world/ft_set_world.c:17: referencia a `ft_build_camera' sin definir
collect2: error: ld returned 1 exit status
make: *** [Makefile:69: miniRT] Error 1


https://programmerclick.com/article/58421000871/
https://programmersought.com/article/32124805918/
https://cs50.stackexchange.com/questions/14615/memory-overlap-in-c/14729
https://www.educative.io/edpresso/how-to-convert-a-string-to-an-integer-in-c
atoi:
https://www.geeksforgeeks.org/write-your-own-atoi/
colores:
https://qastack.mx/programming/4842424/list-of-ansi-color-escape-sequences

strlcat and strlcpy:
https://www.mkssoftware.com/docs/man3/strlcat.3.asp

https://c-for-dummies.com/blog/?p=3896

https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.html

https://github.com/pbie42/libft42commented

https://github.com/lattera/freebsd/blob/master/lib/libc/string/memcmp.c

malloc
https://programmerclick.com/article/5645523514/

valgrind(testear memoria)

https://www.it.uc3m.es/pbasanta/asng/course_notes/memory_profiler_es.html

punteros 

https://stackoverflow.com/questions/50738225/how-to-print-a-double-pointer-value-in-c
https://stackoverflow.com/questions/37098194/why-this-pointer-to-pointer-to-char-is-current

estructurasgcc -Wall -Wextra -Werror -MMD -g -O0 obj/src/main.o obj/src/utilities/ft_find.o obj/src/render/ft_init.o obj/src/render/ft_render.o -L./src/parser -lparser -L./src/maths -lmath -L./src/cameras -lcameras -L./mlx -lmlx -L./src/window -lwindow -L./src/world -lworld -L./src/tracers -ltracers -L./src/geometricobj -lgeometricobj -L./src/utilities -lshade -L./mlx/ -lmlx -L/usr/lib -Imlx -lXext -lX11 -lm -lz -o miniRT
/usr/bin/ld: obj/src/render/ft_render.o: en la función `ft_render':
/home/vboxuser/Escritorio/new-minirt/src/render/ft_render.c:29: referencia a `ft_samplers' sin definir
/usr/bin/ld: ./src/world/libworld.a(ft_set_world.o): en la función `ft_set_world':
/home/vboxuser/Escritorio/new-minirt/src/world/ft_set_world.c:17: referencia a `ft_build_camera' sin definir
collect2: error: ld returned 1 exit status
make: *** [Makefile:110: miniRT] Error 1


https://www.delftstack.com/es/howto/c/return-a-struct-in-c/
https://dyclassroom.com/c/c-function-returning-structure

http://www.pedrogonzalezruiz.net/listas/listas.html


https://blog.zhaw.ch/icclab/hunting-down-memory-leaks/



https://giters.com/gabrielasertori/Libft-42
https://giters.com/gabrielasertori/Libft-42##helpfull-links


https://github.com/hanshazairi/42-libft/blob/master/ft_split.c

get next line:

https://bestofcpp.com/repo/Surfi89-get_next_line-cpp-miscellaneous


https://github.com/Surfi89/get_next_line/blob/main/get_next_line.c

https://velog.io/@yamkim/42-Seoul-Get-Next-Line2-Overview
http://seyong.me/study/Get-Next-Line/#read-%ED%95%A8%EC%88%98
https://github.com/cyrus-and/gdb-dashboard

###############
#####printf###
##############

https://iq.opengenus.org/how-printf-and-scanf-function-works-in-c-internally/
https://www.equestionanswers.com/c/c-printf-scanf-working-principle.php

####################################
operadores unarios binarios ternarios
####################################

https://www.geeksforgeeks.org/c-nested-ternary-operator/
https://www.codespeedy.com/nested-ternary-operator-in-c/


##############
ciberseguridad
##############

https://cwe.mitre.org/top25/archive/2021/2021_cwe_top25.html

MINILIBX
https://harm-smits.github.io/42docs/libs/minilibx/colors.html
https://gontjarow.github.io/MiniLibX/

https://github.com/keuhdall/images_example/blob/master/example.c
Fractal
https://ca.wikipedia.org/wiki/Fractal
https://matousstieber.wordpress.com/2016/01/12/julia-set/
https://users.math.yale.edu/public_html/People/frame/Fractals/MandelSet/welcome.html
http://math.bu.edu/DYSYS/
https://www.benlcollins.com/spreadsheets/how-to-draw-the-mandelbrot-set/
https://blogs.kent.ac.uk/onetwomany/2020/04/24/deterministic-vs-predictable-the-mandelbrot-set/
https://www.sekinoworld.com/fractal/
Viewport y redimensionamiento
https://math.hws.edu/graphicsbook/c2/s3.html
Color
http://math.unipa.it/~grim/Jbarrallo.PDF
https://www.paridebroggi.com/blogpost/2015/05/06/fractal-continuous-coloring/
https://krazydad.com/tutorials/makecolors.php

bits
http://galileo.phys.virginia.edu/compfac/courses/practical-c/14.pdf

Makefile
https://stackoverflow.com/questions/52034997/how-to-make-makefile-recompile-when-a-header-file-is-changed
https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html
https://stackoverflow.com/questions/7826448/linking-libraries-with-gcc-order-of-arguments

push swap
https://medium.com/@jamierobertdawson/push-swap-the-least-amount-of-moves-with-two-stacks-d1e76a71789a
https://stackoverflow.com/questions/58497606/creating-linked-list-in-c-using-for-loop-for-assigning-values
https://www.dsi.fceia.unr.edu.ar/images/trasp_T08.pdf
https://www.omnicalculator.com/statistics/combination
http://web.tecnico.ulisboa.pt/mcasquilho/compute/_linpro/TaylorB_module_c.pdf
https://doc.lagout.org/science/0_Computer%20Science/2_Algorithms/The%20Art%20of%20Computer%20Programming%20%28vol.%203_%20Sorting%20and%20Searching%29%20%282nd%20ed.%29%20%5BKnuth%201998-05-04%5D.pdf
https://medium.com/algopods/burrows-wheeler-transform-c743a2c23e0a


Minishell
https://github.com/jeffallen/xv6
https://mwatler.github.io/unx511_winter2021/Advanced%20Programming%20in%20the%20UNIX%20Environment%203rd%20Edition.pdf
https://blog.nelhage.com/2009/12/a-brief-introduction-to-termios-termios3-and-stty/

https://stackoverflow.com/questions/70672456/how-here-document-works-in-shell
https://askubuntu.com/questions/1120556/how-input-redirection-works

Philosophers
https://github.com/iciamyplant/Philosophers
https://patches.linaro.org/project/ltp/patch/1406585102-31700-1-git-send-email-gary.robertson@linaro.org/
https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_09

Net_practice
https://www.routeralley.com/guides/ipv4.pdf
https://networklessons.com/subnetting/subnetting-in-binary

#miniRt
https://www.realtimerendering.com/raytracing/An-Introduction-to-Ray-Tracing-The-Morgan-Kaufmann-Series-in-Computer-Graphics-.pdf
https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points.html
https://learnopengl.com/Getting-started/Camera
http://merlot.ijs.si/~matevz/docs/PovRay-3.50b/povdoc_181.html
https://www.geogebra.org/3d
https://www.pbr-book.org/3ed-2018/contents

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
https://hugi.scene.org/online/hugi24/coding%20graphics%20chris%20dragan%20raytracing%20shapes.htm
cpp:
https://www.learncpp.com/cpp-tutorial/exceptions-classes-and-inheritance/

#avoid C-style casting in c++

https://anteru.net/blog/2007/c-background-static-reinterpret-and-c-style-casts/

#C++
https://shop.iotone.ir/public/upload/article/5b9f487cb4536.pdf
https://www.reddit.com/r/cpp/comments/mvg2mi/best_security_practices_when_writing_cc_code/
https://web.notaduo.com/notes/fmzva/edit
https://hackingcpp.com/cpp/std/algorithms/intro.html
EVAL
https://github.com/abouabra/42-evaluations/blob/master/ng_4_cpp_module_07.pdf

cpp09
https://github.com/Bmbul/CPP_Module09
https://github.com/brixxt27/cpp_module_09
https://github.com/MahdyZ7/CppModule09/tree/main

https://github.com/PunkChameleon/ford-johnson-merge-insertion-sort
https://woongtech.tistory.com/entry/42SEOUL-CPP-Module-09#%EB%A7%88%EC%B9%98%EB%A9%B0-1

##Docker

Images:
	In the docker world, an image is effectively a stopped container. We can
	think of an image as a class.
	To show the images of our Docker, we can run the command: <docker image ls>
	Use the "docker image build" command to create a new image using the
	instructions contained in the Dockerfile: <docker image build -t
	"name:tag">
	Comandos:
		delete an image: docker image rm "tag image" or ID image
		if you want to delete all the images of your docker:
		docker image rm $(docker image ls -q) -f. The -q flag lists all the IDS of the images
	· <docker image pull> is the command to download images. By default, images
	will be pulled from repositories on Docker Hub. This command will pull the image tagged
	as "latest".
	· <docker image ls> lists all of the images stored in your Docker host's local cache.
	To see the SHA256 digests of images add the --digests flag.
	· <docker image inspect>: It gives you all of the details of image - layer data and metadata.
	· <docker image rm>: command to delete images. You cannot delete an image that is associated
	with a container in the running (Up) or stopped (Exited) states.

Containers:
	A container is the runtime instance of an image. In the same way that we can start a VM
	from a virtual machine template, we start one, or more, containers from a single image.
	The big difference between a VM and a container is that containers are faster and more
	lightweight - instead of running a full-blown OS like a VM, containers share the OS/kernel
	with the host they are running on.

	The simplest way to start a container is with <docker container run> command. In its most basic
	form you tell it an image to use and a command to run "docker container run <image> <command>.
	For example: <docker container run -it alpine /bin/bash.
	The -it falgs will connect your current terminal to the container's shell.

	You can manually stop a container with the <docker container stop> command, and then restart
	it with <docker container start>. To get rid of a container forever you have to delete it
	using <docker container rm>

	Checking the Docker daemon:
		The first thing to always do when you log on to a Docker host is check
		that Docker is running.
		<docker version>
		As long as you get a response back in the Client and Server sections
		you should be good to go. If you get an error code in the Server
		section there's a good chance that the docker daemon(server) is not
		running or that your user account doesn't have permission to accest it.
		To check if docker service is active use:
		<systemctl is-active docker>
	Example of usage with ports:
	<docker container run -d --name webserver -p 80:8080 \
	nigelpoulton/pluralsight-docker-ci>

	We know that docker container run starts a new container. But this time we
	give it the -d flag instead of -it. -d tells the container to run in the
	background. The "d" stands for daemon mode. After that, we name the
	container and then give it -p 80:8080. The -p flag maps ports on the Docker
	host to ports inside the container.

	Commands resume:
		# <docker container run>: starts a new container.
		# <Ctrl - PQ> will detach your shell from the terminal of a container and
		leave the container running (Up) in the background.
		# <docker container ls> Lists all containers in the running (Up) state.
		If you add the -a flag you will also see containers in the stopped
		(Exited) state.
		# <docker container exec> lets you run a new process inside of a
		running container. It's useful for attaching the shell of your Docker
		host to a terminal inside of a running container.
		# <docker container stop> will stop a running container and put it in
		the (Exited (0)) state. It does this by issuing a SIGTERM to the
		process with PID 1 inside of the container. If the process has not
		cleaned up and stopped within 10 secs, a SIGKILL will be issued to
		forcibly stop the container. docker container stop accepts container
		IDs and container names as arguments.
		# <docker container start> will restart a stopped (Exited) container.
		You can give docker container start the name or ID of a container.
		# <docker container rm> will delete a stopped container. It is
		recommended that you stop a container with the docker container stop
		command before deleting it with docker rm.
		# <docker container inspect> will shoow you detailed configuration and
		runtime info about a container. It accepts container names and
		contained IDs as its main argument.

Containerizing an App

	The process of Containerizing an app looks like this:
		1. Start with your application code.
		2. Create a Dockerfile that describes your app, its dependencies, and
		how to run it.
		3. Feed this Dockerfile into the docker image build command.

	Dockerfiles:
		A Dockerfile describes the application and tells Docker how to build an
		image from it.
		The Dockerfile has two main purposes:
			1. To describe the application.
			2. To tell Docker how to containerize the app (create an image with the
			app inside).
		* All Dockerfiles start with the FROM instruction. This will be the base
		layer of the image, and the rest of the app will be added on top as
		additional layers.
		* Next, the Dockerfile creates a LABEL and specifies an email as the
		maintainer of the image. Labels are simple key-value pairs and are an
		excellent way of adding custom metadata to an image. It is considered a
		best practice to list a maintainer of an image.
		* The RUN instruction installs these packages as a new image layer on
		  top of the alpine base image created by the FROM instruction.
		* The COPY instruction copies in the app files from the build context.
		* Next, the Dockerfile uses the WORKDIR instruction to set the working
		  directory for the rest of the instructions in the file. This
		  directory is relative to the image, and the info is added as metadata
		  to the image config not as a new layer.
		* The app exposes a web service on TCP port 8080, so the Dockerfile
		  documents this with the EXPOSE 8080 instruction. This is added as
		  image metadata.
		* Finally, the ENTRYPOINT instruction is used to set the main
		  application that the iamge (container) should run. This is also a
		  metadata.

		A closer overview:
			Examples of instructions that create new layers are FROM, RUN, COPY.
			Example of instructions that create metadata EXPSOE, WORKDIR, ENV,
			ENTRYPOINT.

		You can view the instructions that were used to buiild the image with
		<docker image history [image]>

		Every RUN instruction adds a new layer. As a result, it's ussually
		considered a best practice to include multiple commands as part of a
		single RUN instruction, all glued together with double-ampersands (&&)
		and blacklash.

		The commands - Containerizing:
		* <docker image build> is the command that reads a Dockerfile and
		  containerizes an app. The -t flag tags the image, the -f flag lets
		  you specify the name and location of the Dockerfile.
		* <FROM> specifies the base image for the new image you will build. It
		  is usually the first instruction in a Dockerfile.
		* <RUN> allows you to run commands inside the image which create new
		  layers. Each RUN instruction creates a single new layer.
		* <COPY> adds files into the image as a new layer. It is common to use
		  the COPY instruction to copy your application code into an image.
		* <EXPOSE> documents the network port that the application uses.
		* <ENTRYPOINT> sets the default application to run when the image is
		  started as a container.


https://www.cyberciti.biz/faq/configure-nginx-to-use-only-tls-1-2-and-1-3/
https://www.baeldung.com/linux/nginx-docker-container
https://github.com/gemartin99/inception
https://github.com/vbachele/Inception/blob/main/scrs/requirements/mariadb/Dockerfile
https://github.com/Forstman1/inception-42/blob/main/srcs/requirements/mariadb/tools/script.sh
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/

https://lowendbox.com/blog/automating-mysql_secure_installation-in-mariadb-setup/
https://it-garry.medium.com/shell-scripts-thatll-automate-software-installation-on-your-linux-server-part-iii-998975bd15c8
https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-nginx-mariadb-and-php-on-debian-10
https://fromdual.com/mysql-configuration-file-sample
https://mariadb.com/kb/en/server-system-variables/#basedir
https://github.com/sebamiro/inception/blob/master/srcs/requirements/mariadb/tools/mariadb.sh
https://github.com/burak-yldrm/Inception/blob/main/srcs/requirements/mariadb/conf/50-server.cnf

ERROR
https://stackoverflow.com/questions/19101243/error-1130-hy000-host-is-not-allowed-to-connect-to-this-mysql-server
https://stackoverflow.com/questions/64320136/error-2002-hy000-cant-connect-to-mysql-server-on-192-168-1-15-115
https://stackoverflow.com/questions/54261020/wordpress-wp-config-php-does-not-exist
https://stackoverflow.com/questions/66453816/mariadb-tables-are-deleted-when-use-volume-in-docker-compose


https://rphlr.github.io/42-Evals/Rank05/Inception/

Evaluation inception:
· why dont we use networ host?
If you run containers on the host network, you will face problems if you want to run two copies of the same image. Since both
copies will try to bind to the same ports, and they will fail. When you use a bridge network, every container gets their
own network namespace and own separate IP.

· What is docker and docker compose?
Docker is a software that allows us to run any application in a virtualized environment, using just about any
hardware or OS we want.
Docker compose is a tool for defining and running multi-container Docker applications. Using a YAML file we can 
configure multiple containers in one place. We can start and stop all of those containers at once using a single command.
· Difference between a Docker image used with docker compose and without docker compose.
When you use a Docker image without docker compose, you typically work with individual containers. You are responsible for configuring
and connectiing the containers manually. 
· The benefit of Docker compared to VMs
portability, docker containers are higly portable. They encapsul an app and its dependencies. Docker start very fast while VWs may take some minutes to book. Docker containers share the host OS kernel, which means they are more lightweight compared to VMs.
· Docker network explanation:
DOcker networking is primarily used to establish communication between Docker containers and the outside world via the host machine.





##ft_irc

14.4.1 select function

Socket descriptors:
	If we were using file descriptors to access files, applications use socket
	descriptors to access sockets. Socket descriptors are implemented as file
	descriptors in UNIX Sytem. Indeed, many functions that deal with file
	descriptors, such as read and write, will work with a socket descriptor.
	To create a socket with use the "socket" function:
		#include <sys/socket.h>
		int socket (int domain, int type, int protocol);
			Returns: file (socket) descriptor if OK, -1 on error.

	Domain: determines the nature of the communication, including the address
	format. The constants start with "AF_" (Address Family):
		AF_INET: IPv4 internet domain.
		AF_INET6: IPv6 internet domain.
		AF_UNIX: Unix domain.
		AF_UNSPEC: unspecified.

		Most systems define the AF_LOCAL, which is an alias for AF_UNIX. The
		AF_UNSPEC is a wildcard that represents any domain.
	Type: determines the type of the socket:
		SOCK_DGRAM: fixed-length, connectionless, unreliable messages.
		SOCK_RAW: datagram interface to IP.
		SOCK_SEQPACKET: fixed-length, sequenced, reliable, connection-oriented
		messages.
		SOCK_STREAM: sequenced, reliable, bidirectional, connection-oriented
		byte streams.
	Protocol: this argument is usually zero, to select the default protocol for
	the given domanin and socket type.


	Calling "socket" is similar to calling "open". In both cases, you get a
	file descriptor that can be used for I/O. When you are done using the file
	descriptor, you should call "close".

Address Formats:
	An address identifies a socket endpoint in a particular communication
	domain. The addresses are cast to a generic sockaddr address structure:
	struct sockaddr
	{
		sa_family_t	sa_family; //address family
		char		sa_data[]; //variable-length address
	};

16.3.4 Associating addresses with sockets:
	For a server, we need to associate a well-known address with the server's
	socket on which client requests will arrive. Clients need a way to discover
	the address to use to contact a server, and the simplest scheme is for a
	server to reserve an address and register it in /etc/services or with a
	name service.
	We use "bind" function to associate an address with a socket.
	###### PROTOTYPE ###################
	#include <sys/socket.h>

	int bind(int sockfd, const struct sockaddr *addr, socklen_t len);
	Returns: 0 if OK, -1 on error;
	#######################################

	We can use the "getsockname" function to discover the address bound to a
	socket.
	###### PROTOTYPE ###################
	#include <sys/socket.h>

	int	getsockname(int sockfd, struct sockaddr *restrict addr, socklen_t
	*restrict alenp);
	Returns: 0 if OK, -1 on error.
	#######################################
	Before calling "getsockname", we set alenp to point to an integer
	containing the size of the sockaddr buffer.


16.4 Connection Establishment:
	Before we can exchange data, we need to create a connection between the
	socket of the process requesting the service (the client) and the process
	providing the service (the server). We use the "connect" function to create
	a connection.
	###### PROTOTYPE ###################
	#include <sys/socket.h>

	int connect(int sockfd, const struct sockaddr *addr, socklen_t len);
	Returns: 0 if OK, -1 on error.
	#######################################
	The address we specify with "connect" is the address of the server with
	which we wish to communicate. if sockfd is not bound to an address,
	"connect" will bind a default address for the caller.

	A server announces that it is willing to accept connect requests by calling
	the "listen" function.
	###### PROTOTYPE ###################
	#include <sys/socket.h>

	int	listen(int sockfd, int backlog);
	Returns: 0 if OK, -1 on error.
	#######################################
	The backlog argument provides a hint to the system regarding the number of
	outstanding connect requests that it should enqueue on behalf of the
	process. The actual value is determined by the system, but the upper limit
	is specified as SOMAXCOON (for TCP, the default is 128).

	Once a server has called "listen", the socket used can receive connect
	requests. We use the "accept" function to retrieve a connect request and
	convert it into a connection.
	###### PROTOTYPE ###################
	#include <sys/socket.h>

	int	accept(int sockfd, struct sockaddr *restrict addr, socklen_t *restrict
	len);
	Returns: file (socket) descriptor if OK, -1 on error.
	#######################################
	The file descriptor returned by "accept" is a socket descriptor that is
	connected to the client that called "connect". This new socket descriptor
	has the same socket type and address family as the original socket
	(sockfd).
	If we do not care about the client's identity, we can set the addr and len
	parameters to NULL. 


16.5 Data transfer:
	We can use "read" and "write" to communicate with a socker, as long as it is connected. 
	Although we can exchange data using "read" and "write", that is about all we can do with
	these two functions. If we want to specify options, receive packets from multiple clients, or send
	out-of-band data, we need to use one of the six socket functions.
	Three functions are available for sending data, and three are available for receiving data. 
	The simplest one is "send". It is similar to "write" but allows us to specifu flags to change how
	the data we want to transmit is treated.
	###### PROTOTYPE ###################
	#include <sys/socket.h>
	
	ssize_t send(int sockfd, const void *buf, size_t nbytes, int flags);
	Returns: number of bytes sent if OK, -1 on error.

	#######################################

	If "send" returns success, it does not mean that the process at the other end of the connection receives
	the data. All we are guaranteed is that when send succeeds, the data has been delivered to the network
	drivers without error.

	The "recv" function is similar to "read", but allows us to specify some options to control how we
	receive the data.
	###### PROTOTYPE ###################
	#include <sys/socket.h>
	ssize_t recv(int sockfd, void *buf, size_t nbytes, int flags);
	Returns: lenght of message in bytes, 0 if no messages are available and peer has done an orderly
	shutdown, or -1 on error.
	#######################################

16.6 Socket Options

	The socket mechanism provides two socket-option interfaces for use to
	control the behavior of sockets.
	We can set a socket option with the "setsockopt" function.
	###### PROTOTYPE ###################
	#include <sys/socket.h>

	int	setsockopt(int sockfd, int level, int option, const void *val,
	socklen_t len);
	Returns: 0 if OK, -1 on error.
	#######################################
	The level argument identifies the protocol to which the option applies.
	The val argument points to a data structure or an integer. Sope options are
	on/off switches. If the integer is nonzero, then the option is enabled.
	The len argument specifies the size of the object to which val points.

16.7 Out-of-Band data

	We saw that we could use the F_SETOWN command to "fcntl" to set the
	ownership of a socket. if the third argument to fcntl is positive, it
	specifies a process ID. If it is a negative value other than -1, it
	represents the process group ID. Thus, we can arrange that our process
	receive signals from a socket by calling:

	fcntl(sockfd, F_SETOWN, pid);

	The F_GETOWN command can be used to retrieve the current socket ownership.
	As with the F_SETOWN command, a negative value represents a process group
	ID and a positive value represents a process ID. Thus the call:

	owner = fcntl (sockfd, F_GETOWN, 0);

	will return the owner equal to the ID of the process configured to receive
	signals from the socket if owner is positive.



Advanced IPC




https://www.geeksforgeeks.org/tcp-server-client-implementation-in-c/
https://www.ibm.com/docs/en/ssw_ibm_i_71/rzab6/rzab6.pdf
https://www.ibm.com/docs/en/i/7.1?topic=designs-using-poll-instead-select
https://github.com/marineks/Ft_irc/blob/de7d4df6282bb3d17fb7a7078f1eeed05de8524e/srcs/ManageServer.cpp#L7
https://github.com/b-tekinli/ft_irc/blob/5aae07a0c0ca6f936f100e31992b9d5f6c54ff01/src/server/Server.cpp#L55

https://github.com/Alexdelia/42-ft_irc/blob/main/src/channel/Channel.hpp
https://github.com/marineks/Ft_irc/blob/main/srcs/class/Channel.cpp

https://github.com/irssi/irssi

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


Trascendence
https://www.youtube.com/watch?v=vzGllw18DkA&ab_channel=freeCodeCamp.org
6 24
